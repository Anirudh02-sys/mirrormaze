digraph "CFG for '_Z24montgomery_ladder_modexpyyy' function" {
	label="CFG for '_Z24montgomery_ladder_modexpyyy' function";

	Node0x5580b0428c40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{entry:\l  %pgocount3 = load i64, i64* getelementptr inbounds ([3 x i64], [3 x i64]*\l... @__profc__Z24montgomery_ladder_modexpyyy.2, i64 0, i64 2), align 8\l  %0 = add i64 %pgocount3, 1\l  store i64 %0, i64* getelementptr inbounds ([3 x i64], [3 x i64]*\l... @__profc__Z24montgomery_ladder_modexpyyy.2, i64 0, i64 2), align 8\l  %pgocount = load i64, i64* getelementptr inbounds ([3 x i64], [3 x i64]*\l... @__profc__Z24montgomery_ladder_modexpyyy, i64 0, i64 2), align 8\l  %1 = add i64 %pgocount, 1\l  store i64 %1, i64* getelementptr inbounds ([3 x i64], [3 x i64]*\l... @__profc__Z24montgomery_ladder_modexpyyy, i64 0, i64 2), align 8\l  %base.addr = alloca i64, align 8\l  %exp.addr = alloca i64, align 8\l  %mod.addr = alloca i64, align 8\l  %R0 = alloca i64, align 8\l  %R1 = alloca i64, align 8\l  %total_bits = alloca i32, align 4\l  %i = alloca i32, align 4\l  %iBit = alloca i64, align 8\l  store i64 %base, i64* %base.addr, align 8\l  call void @llvm.dbg.declare(metadata i64* %base.addr, metadata !288,\l... metadata !DIExpression()), !dbg !289\l  store i64 %exp, i64* %exp.addr, align 8\l  call void @llvm.dbg.declare(metadata i64* %exp.addr, metadata !290, metadata\l... !DIExpression()), !dbg !291\l  %exp.addr1 = bitcast i64* %exp.addr to i8*\l  call void @llvm.var.annotation(i8* %exp.addr1, i8* getelementptr inbounds\l... ([7 x i8], [7 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([12 x\l... i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 10, i8* null)\l  store i64 %mod, i64* %mod.addr, align 8\l  call void @llvm.dbg.declare(metadata i64* %mod.addr, metadata !292, metadata\l... !DIExpression()), !dbg !293\l  call void @llvm.dbg.declare(metadata i64* %R0, metadata !294, metadata\l... !DIExpression()), !dbg !295\l  store i64 1, i64* %R0, align 8, !dbg !295\l  call void @llvm.dbg.declare(metadata i64* %R1, metadata !296, metadata\l... !DIExpression()), !dbg !297\l  %2 = load i64, i64* %base.addr, align 8, !dbg !298\l  %3 = load i64, i64* %mod.addr, align 8, !dbg !299\l  %rem = urem i64 %2, %3, !dbg !300\l  store i64 %rem, i64* %R1, align 8, !dbg !297\l  call void @llvm.dbg.declare(metadata i32* %total_bits, metadata !301,\l... metadata !DIExpression()), !dbg !302\l  store i32 64, i32* %total_bits, align 4, !dbg !302\l  call void @llvm.dbg.declare(metadata i32* %i, metadata !303, metadata\l... !DIExpression()), !dbg !305\l  %4 = load i32, i32* %total_bits, align 4, !dbg !306\l  %sub = sub nsw i32 %4, 1, !dbg !307\l  store i32 %sub, i32* %i, align 4, !dbg !305\l  br label %for.cond, !dbg !308\l}"];
	Node0x5580b0428c40 -> Node0x5580b0428c90[penwidth=2];
	Node0x5580b0428c90 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.cond:                                         \l  %5 = load i32, i32* %i, align 4, !dbg !309\l  %cmp = icmp sge i32 %5, 0, !dbg !311\l  br i1 %cmp, label %for.body, label %for.end, !dbg !312, !prof !313\l|{<s0>T|<s1>F}}"];
	Node0x5580b0428c90:s0 -> Node0x5580b0428ce0[label="98.46%" penwidth=1.98];
	Node0x5580b0428c90:s1 -> Node0x5580b0428e70[label="1.54%" penwidth=1.02];
	Node0x5580b0428ce0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.body:                                         \l  call void @llvm.dbg.declare(metadata i64* %iBit, metadata !314, metadata\l... !DIExpression()), !dbg !316\l  %6 = load i64, i64* %exp.addr, align 8, !dbg !317\l  %7 = load i32, i32* %i, align 4, !dbg !318\l  %sh_prom = zext i32 %7 to i64, !dbg !319\l  %shr = lshr i64 %6, %sh_prom, !dbg !319\l  %and = and i64 %shr, 1, !dbg !320\l  store i64 %and, i64* %iBit, align 8, !dbg !316\l  %8 = load i64, i64* %iBit, align 8, !dbg !321\l  %tobool = icmp ne i64 %8, 0, !dbg !321\l  br i1 %tobool, label %if.then, label %if.else, !dbg !323, !prof !324\l|{<s0>T|<s1>F}}"];
	Node0x5580b0428ce0:s0 -> Node0x5580b0428d30[label="50.00%" penwidth=1.50];
	Node0x5580b0428ce0:s1 -> Node0x5580b0428d80[label="50.00%" penwidth=1.50];
	Node0x5580b0428d30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{if.then:                                          \l  %pgocount4 = load i64, i64* getelementptr inbounds ([3 x i64], [3 x i64]*\l... @__profc__Z24montgomery_ladder_modexpyyy.2, i64 0, i64 1), align 8, !dbg !325\l  %9 = add i64 %pgocount4, 1, !dbg !325\l  store i64 %9, i64* getelementptr inbounds ([3 x i64], [3 x i64]*\l... @__profc__Z24montgomery_ladder_modexpyyy.2, i64 0, i64 1), align 8, !dbg !325\l  %pgocount1 = load i64, i64* getelementptr inbounds ([3 x i64], [3 x i64]*\l... @__profc__Z24montgomery_ladder_modexpyyy, i64 0, i64 0), align 8, !dbg !325\l  %10 = add i64 %pgocount1, 1, !dbg !325\l  store i64 %10, i64* getelementptr inbounds ([3 x i64], [3 x i64]*\l... @__profc__Z24montgomery_ladder_modexpyyy, i64 0, i64 0), align 8, !dbg !325\l  %11 = load i64, i64* %R0, align 8, !dbg !325\l  %12 = load i64, i64* %R1, align 8, !dbg !327\l  %mul = mul i64 %11, %12, !dbg !328\l  %13 = load i64, i64* %mod.addr, align 8, !dbg !329\l  %rem2 = urem i64 %mul, %13, !dbg !330\l  store i64 %rem2, i64* %R0, align 8, !dbg !331\l  %14 = load i64, i64* %R1, align 8, !dbg !332\l  %15 = load i64, i64* %R1, align 8, !dbg !333\l  %mul3 = mul i64 %14, %15, !dbg !334\l  %16 = load i64, i64* %mod.addr, align 8, !dbg !335\l  %rem4 = urem i64 %mul3, %16, !dbg !336\l  store i64 %rem4, i64* %R1, align 8, !dbg !337\l  br label %if.end, !dbg !338\l}"];
	Node0x5580b0428d30 -> Node0x5580b0428dd0[penwidth=2];
	Node0x5580b0428d80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dc5d4a70",label="{if.else:                                          \l  %pgocount5 = load i64, i64* getelementptr inbounds ([3 x i64], [3 x i64]*\l... @__profc__Z24montgomery_ladder_modexpyyy.2, i64 0, i64 0), align 8, !dbg !339\l  %17 = add i64 %pgocount5, 1, !dbg !339\l  store i64 %17, i64* getelementptr inbounds ([3 x i64], [3 x i64]*\l... @__profc__Z24montgomery_ladder_modexpyyy.2, i64 0, i64 0), align 8, !dbg !339\l  %pgocount2 = load i64, i64* getelementptr inbounds ([3 x i64], [3 x i64]*\l... @__profc__Z24montgomery_ladder_modexpyyy, i64 0, i64 1), align 8, !dbg !339\l  %18 = add i64 %pgocount2, 1, !dbg !339\l  store i64 %18, i64* getelementptr inbounds ([3 x i64], [3 x i64]*\l... @__profc__Z24montgomery_ladder_modexpyyy, i64 0, i64 1), align 8, !dbg !339\l  %19 = load i64, i64* %R0, align 8, !dbg !339\l  %20 = load i64, i64* %R1, align 8, !dbg !341\l  %mul5 = mul i64 %19, %20, !dbg !342\l  %21 = load i64, i64* %mod.addr, align 8, !dbg !343\l  %rem6 = urem i64 %mul5, %21, !dbg !344\l  store i64 %rem6, i64* %R1, align 8, !dbg !345\l  %22 = load i64, i64* %R0, align 8, !dbg !346\l  %23 = load i64, i64* %R0, align 8, !dbg !347\l  %mul7 = mul i64 %22, %23, !dbg !348\l  %24 = load i64, i64* %mod.addr, align 8, !dbg !349\l  %rem8 = urem i64 %mul7, %24, !dbg !350\l  store i64 %rem8, i64* %R0, align 8, !dbg !351\l  br label %if.end\l}"];
	Node0x5580b0428d80 -> Node0x5580b0428dd0[penwidth=2];
	Node0x5580b0428dd0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{if.end:                                           \l  br label %for.inc, !dbg !352\l}"];
	Node0x5580b0428dd0 -> Node0x5580b0428e20[penwidth=2];
	Node0x5580b0428e20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.inc:                                          \l  %25 = load i32, i32* %i, align 4, !dbg !353\l  %dec = add nsw i32 %25, -1, !dbg !353\l  store i32 %dec, i32* %i, align 4, !dbg !353\l  br label %for.cond, !dbg !354, !llvm.loop !355\l}"];
	Node0x5580b0428e20 -> Node0x5580b0428c90[penwidth=2];
	Node0x5580b0428e70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#abc8fd70",label="{for.end:                                          \l  %26 = load i64, i64* %R0, align 8, !dbg !358\l  ret i64 %26, !dbg !359\l}"];
}
